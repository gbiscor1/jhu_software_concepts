"""TEST FILES GENERATED BY GPT"""

import json
import sys
import textwrap
from pathlib import Path

from clean import Cleaner, LLMClient

def _write_fake_llm_app(tmpdir: Path, mode: str = "json") -> Path:
    """
    Create a minimal llm_hosting/app.py that:
      - reads --file <path> JSON {"rows":[{"program": "..."}]}
      - writes either JSON object {"rows":[...]} or JSONL to stdout
    mode: "json" or "jsonl"
    """
    app_py = tmpdir / "app.py"
    code = f"""
import sys, json, argparse, pathlib
parser = argparse.ArgumentParser()
parser.add_argument("--file", required=True)
args = parser.parse_args()
p = pathlib.Path(args.file)
data = json.loads(p.read_text(encoding="utf-8"))
out_rows = []
for item in data.get("rows", []):
    txt = (item.get("program") or "").strip()
    # naive split "Program, University"
    prog = txt.split(",", 1)[0].strip() if "," in txt else txt
    univ = txt.split(",", 1)[1].strip() if "," in txt else ""
    # pretend "canonicalization": title-case
    out_rows.append({{
        "llm-generated-program": prog.title() or None,
        "llm-generated-university": univ.title() or None
    }})

if "{mode}" == "json":
    sys.stdout.write(json.dumps({{"rows": out_rows}}, ensure_ascii=False))
else:
    for r in out_rows:
        sys.stdout.write(json.dumps(r, ensure_ascii=False) + "\\n")
"""
    app_py.write_text(textwrap.dedent(code), encoding="utf-8")
    return app_py

def test_llm_client_health_and_canonize_json(tmp_path):
    app_dir = tmp_path / "llm_hosting_json"
    app_dir.mkdir()
    _write_fake_llm_app(app_dir, mode="json")

    client = LLMClient(app_dir=str(app_dir), timeout_s=10.0)
    assert client.health() is True

    inputs = [
        "computer science, mit",
        "statistics, university of waterloo",
        "mechanical engineering, caltech",
    ]
    out = client.canonize_batch(inputs)
    assert isinstance(out, list) and len(out) == len(inputs)
    for pair in out:
        assert set(pair.keys()) == {"program_canon", "university_canon"}
        assert pair["program_canon"]  # should be title-cased string
        # university can be empty if the input had no comma; here they all have commas
        assert pair["university_canon"]

def test_llm_client_canonize_jsonl(tmp_path):
    app_dir = tmp_path / "llm_hosting_jsonl"
    app_dir.mkdir()
    _write_fake_llm_app(app_dir, mode="jsonl")

    client = LLMClient(app_dir=str(app_dir), timeout_s=10.0)
    assert client.health() is True

    inputs = ["math, ucla", "physics, princeton"]
    out = client.canonize_batch(inputs)
    assert isinstance(out, list) and len(out) == 2
    assert out[0]["program_canon"] == "Math"
    assert out[0]["university_canon"] == "Ucla"

def test_cleaner_extend_with_llm_overrides_fields(tmp_path):
    # fake app
    app_dir = tmp_path / "llm_hosting"
    app_dir.mkdir()
    _write_fake_llm_app(app_dir, mode="json")

    client = LLMClient(app_dir=str(app_dir), timeout_s=10.0)

    rows = [
        {
            "program": "computer science",
            "university": "mit",
            "date_added": "2025-01-01",
            "url": "https://example.com/1",
            "status": "Accepted",
            "comments": None, "accept_date": None, "reject_date": None,
            "start_term": None, "start_year": None, "citizenship": None,
            "gre_total": None, "gre_verbal": None, "gre_aw": None,
            "degree": "PhD", "gpa": None,
        }
    ]

    cleaner = Cleaner(validate_with_dataclass=False)
    extended = cleaner.extend_with_llm(rows, client)
    assert len(extended) == 1
    r = extended[0]
    # override happened
    assert r["program"] == "Computer Science"
    assert r["university"] == "Mit"
    # canon fields present
    assert r["program_canon"] == "Computer Science"
    assert r["university_canon"] == "Mit"

def test_llm_client_handles_failure_returns_nones(tmp_path):
    # app exists but will exit nonzero
    app_dir = tmp_path / "llm_hosting_bad"
    app_dir.mkdir()
    app_py = app_dir / "app.py"
    app_py.write_text("import sys; sys.exit(2)", encoding="utf-8")

    client = LLMClient(app_dir=str(app_dir), timeout_s=5.0)
    assert client.health() is True  # file exists
    out = client.canonize_batch(["x, y", "a, b"])
    assert len(out) == 2
    assert out[0]["program_canon"] is None and out[0]["university_canon"] is None

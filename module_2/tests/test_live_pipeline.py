"""TEST FILES GENERATED BY GPT"""

import os
import json
import re
from urllib.parse import urlparse
import pytest

LIVE = os.getenv("LIVE_SCRAPE", "").strip() == "1"
pytestmark = pytest.mark.skipif(
    not LIVE, reason="Set LIVE_SCRAPE=1 to enable live web tests."
)

BASE = "https://www.thegradcafe.com/survey/"
STATUS_SET = {"Accepted", "Rejected", "Interview", "Waitlisted", "Pending"}
MONTH_RE = re.compile(r"(January|February|March|April|May|June|July|August|September|October|November|December)")

def test_live_scrape_two_pages_and_clean(tmp_path):
    from scrape import Scraper
    from clean import Cleaner

    out_raw = tmp_path / "data" / "raw.json"
    s = Scraper(BASE, delay=0.0)
    rows = s.scrape(start_page=1, max_pages=2, out_path=str(out_raw))
    assert isinstance(rows, list) and len(rows) > 0
    assert out_raw.exists()

    # Clean them
    c = Cleaner(validate_with_dataclass=False)
    cleaned = c.clean_rows(rows)
    assert isinstance(cleaned, list) and len(cleaned) > 0

    # Save cleaned for visual inspection
    out_clean = tmp_path / "data" / "cleaned.json"
    c._save_json(cleaned, out_clean)
    assert out_clean.exists()

    # Spot checks
    for r in cleaned[:10]:
        for k in ("program","university","date_added","url","status"):
            assert isinstance(r.get(k), str) and r[k].strip()
        assert r["status"] in STATUS_SET
        assert MONTH_RE.search(r["date_added"]) or re.match(r"\d{4}-\d{2}-\d{2}$", r["date_added"])
        u = urlparse(r["url"])
        assert u.scheme in ("http","https") and u.netloc.endswith("thegradcafe.com")

def test_live_clean_and_optional_llm(tmp_path, monkeypatch):
    """
    Optional LLM run if LIVE_LLM=1 and llm_app_dir exists.
    Will be skipped silently if not configured.
    """
    from scrape import Scraper
    from clean import Cleaner, LLMClient

    out_raw = tmp_path / "data" / "raw.json"
    s = Scraper(BASE, delay=0.0)
    rows = s.scrape(start_page=1, max_pages=2, out_path=str(out_raw))
    c = Cleaner(validate_with_dataclass=False)
    cleaned = c.clean_rows(rows)

    # Only run LLM if explicitly enabled
    if os.getenv("LIVE_LLM", "").strip() != "1":
        pytest.skip("Set LIVE_LLM=1 (and ensure llm_app_dir exists) to run live LLM test.")

    llm_app_dir = os.getenv("LLM_APP_DIR", "module_2/llm_hosting")
    client = LLMClient(app_dir=llm_app_dir, timeout_s=180.0)

    if not client.health():
        pytest.skip(f"llm_hosting app.py not found in {llm_app_dir}")

    extended = c.extend_with_llm(cleaned, client)
    assert isinstance(extended, list) and len(extended) == len(cleaned)

    # Save for visual check
    out_ext = tmp_path / "data" / "extended.json"
    Cleaner._save_json(extended, out_ext)
    assert out_ext.exists()

    # Verify override present on at least some records
    changed = 0
    for a, b in zip(cleaned, extended):
        if a["program"] != b["program"] or a["university"] != b["university"]:
            changed += 1
    # It's okay if the tiny model is conservative; require non-negative
    assert changed >= 0

"""TEST FILES GENERATED BY GPT"""


# tests/test_clean_basic.py

import json
from pathlib import Path

from clean import Cleaner, REQUIRED_FIELDS, OPTIONAL_FIELDS, SCHEMA_FIELDS

def test_schema_fields_constants():
    # sanity: schema is exactly REQUIRED + OPTIONAL
    assert SCHEMA_FIELDS == REQUIRED_FIELDS + OPTIONAL_FIELDS
    assert set(REQUIRED_FIELDS) == {"program","university","date_added","url","status"}

def test_minimal_row_normalization_happy_path(tmp_path):
    c = Cleaner(validate_with_dataclass=False)  # keep simple for unit tests

    raw = {
        "program": " Computer Science  ",
        "university": "Big State U",
        "date_added": "September 7, 2025",
        "url": " https://www.thegradcafe.com/result/12345 ",
        "status": " wait listed ",
        # optionals in messy forms:
        "degree": "phd",
        "start_term": "Autumn",
        "start_year": "2026",
        "citizenship": "international student",
        "gpa": "4.0",
        "gre_total": "330",
        "gre_verbal": "165",
        "gre_aw": "5.0",
        "comments": "<b>hi</b>  there",
        "accept_date": "2025-09-01",
        "reject_date": None,
        "extra_field_we_ignore": "won't survive",
    }

    out = c.clean_rows([raw])
    assert len(out) == 1
    row = out[0]

    # exact keys
    assert set(row.keys()) == set(SCHEMA_FIELDS)

    # SHALL
    assert row["program"] == "Computer Science"
    assert row["university"] == "Big State U"
    assert row["date_added"] == "2025-09-07"
    assert row["url"] == "https://www.thegradcafe.com/result/12345"
    assert row["status"] == "Waitlisted"

    # SHOULD canonical/normalized
    assert row["degree"] == "PhD"
    assert row["start_term"] == "Fall"
    assert row["start_year"] == 2026
    assert row["citizenship"] == "International"
    assert row["gpa"] == 4.0
    assert row["gre_total"] == 330
    assert row["gre_verbal"] == 165
    assert row["gre_aw"] == 5.0
    assert row["comments"] == "hi there"
    assert row["accept_date"] == "2025-09-01"
    assert row["reject_date"] is None

def test_drop_rows_missing_shall():
    c = Cleaner(validate_with_dataclass=False)
    rows = [
        {"program":"P","university":"U","date_added":"2025-01-01","url":"https://x","status":"Accepted"},
        {"program":"", "university":"U","date_added":"2025-01-01","url":"https://x2","status":"Rejected"},  # empty program
        {"program":"P","university":"", "date_added":"2025-01-01","url":"https://x3","status":"Interview"}, # empty university
        {"program":"P","university":"U","date_added":"",         "url":"https://x4","status":"Pending"},    # empty date
        {"program":"P","university":"U","date_added":"2025-01-01","url":"",        "status":"Pending"},    # empty url
        {"program":"P","university":"U","date_added":"2025-01-01","url":"https://x5","status":""},         # empty status
    ]
    out = c.clean_rows(rows)
    assert len(out) == 1
    assert out[0]["url"] == "https://x"

def test_gre_gpa_bounds_and_clamps():
    c = Cleaner(validate_with_dataclass=False, gpa_max=4.5)
    rows = [{
        "program":"P","university":"U","date_added":"2025-01-01","url":"https://x","status":"Pending",
        "gpa": "5.0",          # above 4.5 cap -> None
        "gre_total": "350",    # above 340 -> None
        "gre_verbal": "120",   # below 130 -> None
        "gre_aw": "6.5",       # above 6.0 -> None
    }]
    out = c.clean_rows(rows)
    r = out[0]
    assert r["gpa"] is None
    assert r["gre_total"] is None
    assert r["gre_verbal"] is None
    assert r["gre_aw"] is None

def test_year_bounds():
    c = Cleaner(validate_with_dataclass=False, year_min=1990, year_max=2030)
    rows = [
        {"program":"P","university":"U","date_added":"2025-01-01","url":"https://x1","status":"Pending","start_year":"1989"},
        {"program":"P","university":"U","date_added":"2025-01-01","url":"https://x2","status":"Pending","start_year":"2031"},
        {"program":"P","university":"U","date_added":"2025-01-01","url":"https://x3","status":"Pending","start_year":"2020"},
    ]
    out = c.clean_rows(rows)
    assert out[0]["start_year"] is None
    assert out[1]["start_year"] is None
    assert out[2]["start_year"] == 2020

def test_status_and_dates_minimal():
    c = Cleaner(validate_with_dataclass=False)
    rows = [{
        "program":"P","university":"U","date_added":"Jan 2, 2024","url":"https://x","status":"accepted",
        "accept_date":"January 5, 2024","reject_date":"Feb 10, 2024",  # reject_date should parse but itâ€™s odd with accepted
    }]
    out = c.clean_rows(rows)
    r = out[0]
    assert r["status"] == "Accepted"
    assert r["date_added"] == "2024-01-02"
    assert r["accept_date"] == "2024-01-05"
    assert r["reject_date"] == "2024-02-10"

def test_dedupe_by_url_preserves_first():
    c = Cleaner(validate_with_dataclass=False, dedupe_by_url=True)
    rows = [
        {"program":"A","university":"U","date_added":"2025-01-01","url":"https://x","status":"Pending"},
        {"program":"B","university":"U","date_added":"2025-01-01","url":"https://x","status":"Pending"},
        {"program":"C","university":"U","date_added":"2025-01-01","url":"https://y","status":"Pending"},
    ]
    out = c.clean_rows(rows)
    assert [r["program"] for r in out] == ["A", "C"]

def test_clean_file_round_trip(tmp_path: Path):
    c = Cleaner(validate_with_dataclass=False)
    raw = [
        {"program":"P","university":"U","date_added":"2025-01-01","url":"https://x","status":"Pending"},
        {"program":"P2","university":"U2","date_added":"2025-01-02","url":"https://y","status":"Rejected"},
    ]
    src = tmp_path / "raw.json"
    dst = tmp_path / "clean.json"
    src.write_text(json.dumps(raw), encoding="utf-8")

    out = c.clean_file(src, dst)
    assert dst.exists()
    saved = json.loads(dst.read_text(encoding="utf-8"))
    assert len(out) == len(saved) == 2
    # key shape check
    assert set(saved[0].keys()) == set(SCHEMA_FIELDS)
